@page "/admin/products"
@page "/admin"
@inherits OwningComponentBase<IStoreRepository>


    <NavLink class="btn btn-primary" href="/admin/products/create">Create</NavLink>
    <div class="container">
        <div class="row">
            <table class="table table-sm table-striped table-bordered">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>HaberBaşlığı</th>
                        <th>Kategori</th>
                        <td />
                    </tr>
                </thead>
                <tbody>
                    @if (ProductData?.Count() > 0)
                    {
            @foreach (Product p in ProductData)
            {
            <tr>
                <td>@p.ProductID</td>
                <td>@p.Description</td>
                <td>@p.Category</td>
                <td><img width="100"height="100" src="@p.Name" alt="Alternate Text" /></td>


                <td>
                    <NavLink class="btn btn-info btn-sm"
                             href="@GetDetailsUrl(p.ProductID)">
                        Details
                    </NavLink>
                    <NavLink class="btn btn-warning btn-sm"
                             href="@GetEditUrl(p.ProductID)">
                        Edit
                    </NavLink>
                    <button class="btn btn-danger btn-sm"
                            @onclick="@(e => DeleteProduct(p))">
                        Delete
                    </button>
                </td>
            </tr>
} }
        else
        {
            <tr>
                <td colspan="5" class="text-center">No Products</td>
            </tr>
}
                </tbody>
            </table>
        </div>
    </div>



    @code { public IStoreRepository Repository => Service;

                public IEnumerable<Product> ProductData { get; set; }

                protected async override Task OnInitializedAsync()
                {
                    await UpdateData();
                }

                public async Task UpdateData()
                {
                    ProductData = await Repository.Products.OrderByDescending(p => p.ProductID).ToListAsync();
                }

                public async Task DeleteProduct(Product p)
                {
                    Repository.DeleteProduct(p);
                    await UpdateData();
                }

                public string GetDetailsUrl(long id) => $"/admin/products/details/{id}";
                public string GetEditUrl(long id) => $"/admin/products/edit/{id}"; }
